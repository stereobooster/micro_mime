# Copyright, 2016, by Samuel G. D. Williams. <http://www.codeotaku.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'mime/types/data'
require 'trenni'
require 'json'
require 'ostruct'

task :load_mime_types do
	mime_types_json_path = File.join(MIME::Types::Data::PATH, "mime-types.json")
	@mime_types = JSON::load(File.open mime_types_json_path)
end

task :generate_extensions_hashtable => :load_mime_types do
	all_extensions = {}

	@mime_types.each do |mime_type|
		if extensions = mime_type['extensions']
			extensions.each do |extension|
				all_extensions[extension] = mime_type['content-type']
			end
		end
	end

	template_path = File.expand_path("Extensions.trenni", __dir__)
	template = Trenni::Template.load_file(template_path)

	state = OpenStruct.new(extensions: all_extensions)
	result = template.to_string(state)

	File.write("Extensions.gperf", result)
end

task :generate_extensions => :generate_extensions_hashtable do
	sh 'gperf', '-CD', '-t', 'Extensions.gperf', '--output-file', 'Extensions.h'
end

class TemplateState < Struct.new(:mime_types)
	def extensions_struct(extensions)
		if extensions
			extensions.join(' ').inspect
		else
			0
		end
	end
end

task :generate_mime_types_hashtable => :load_mime_types  do
	template_path = File.expand_path("MimeTypes.trenni", __dir__)
	template = Trenni::Template.load_file(template_path)

	template_state = TemplateState.new(@mime_types)
	result = template.to_string(template_state)

	File.write("MimeTypes.gperf", result)
end

task :generate_mime_types => :generate_mime_types_hashtable do
	sh 'gperf', '-C', '-t', 'MimeTypes.gperf', '--output-file', 'MimeTypes.h'
end

task :default => [:generate_extensions, :generate_mime_types]